name: üöÄ OrderStake Auto Deploy (Hourly)

# 1 saatte bir otomatik √ßalƒ±≈üƒ±r
on:
  schedule:
    - cron: '0 * * * *'  # Her saatin ba≈üƒ±nda (00:00, 01:00, 02:00, ...)
  
  # Manuel tetikleme i√ßin
  workflow_dispatch:
    inputs:
      manual_deploy:
        description: 'Manual deploy trigger'
        required: false
        default: 'true'

  # Push ile de tetiklenebilir
  push:
    branches: [ master ]
    paths: 
      - 'src/**'
      - 'indexer/**'
      - 'contracts/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'next.config.js'
      - 'netlify.toml'

env:
  NODE_VERSION: '18'
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

jobs:
  auto-deploy:
    name: üîÑ Auto Index & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # T√ºm ge√ßmi≈üi al

    - name: üìã Display Run Info
      run: |
        echo "üöÄ OrderStake Auto Deploy Started"
        echo "‚è∞ Triggered: $(date)"
        echo "üåê Repository: ${{ github.repository }}"
        echo "üîÑ Run ID: ${{ github.run_id }}"
        echo "üìù Event: ${{ github.event_name }}"

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          indexer/package-lock.json
          package-lock.json

    - name: üì¶ Install Dependencies
      run: |
        echo "üì¶ Installing root dependencies..."
        if [ -f package.json ]; then
          npm ci
        else
          echo "‚ö†Ô∏è No package.json in root, skipping..."
        fi
        
        echo "üì¶ Installing indexer dependencies..."
        cd indexer
        if [ -f package.json ]; then
          npm ci
        else
          echo "‚ö†Ô∏è No package.json in indexer, installing basic packages..."
          npm init -y
          npm install dotenv ethers
        fi

    - name: üîß Setup Environment
      run: |
        echo "üîß Setting up environment files..."
        cd indexer
        
        # .env dosyasƒ± varsa koru, yoksa olu≈ütur
        if [ ! -f .env ]; then
          echo "üÜï Creating .env file..."
          cat > .env << EOF
        RPC_URL=https://api.avax.network/ext/bc/C/rpc
        ECOSYSTEM_STAKING_FACTORY_ADDRESS=0xYourFactoryAddress
        ORDER_NFT_LAUNCH_ADDRESS=0xYourNFTAddress  
        START_BLOCK=70000000
        EOF
        fi
        
        echo "‚úÖ Environment setup complete"

    - name: üìä Run Indexer (Continue from Last Block)
      run: |
        echo "üìä Starting indexer from last processed block..."
        cd indexer
        
        # Son blok bilgisini g√∂ster
        if [ -f data/latest-block.json ]; then
          echo "üìç Last processed blocks:"
          cat data/latest-block.json
        else
          echo "üÜï No previous block data found, starting fresh..."
          mkdir -p data
        fi
        
        # Indexer'ƒ± √ßalƒ±≈ütƒ±r
        echo "üîÑ Running indexer..."
        if [ -f indexer.js ]; then
          timeout 300s node indexer.js --once || echo "‚ö†Ô∏è Indexer finished or timed out"
        else
          echo "‚ùå indexer.js not found!"
          exit 1
        fi
        
        # Sonu√ßlarƒ± g√∂ster
        echo "üìà Indexer results:"
        if [ -f data/latest-block.json ]; then
          echo "üìç Updated blocks:"
          cat data/latest-block.json
        fi
        
        if [ -f data/staking.json ]; then
          echo "üìä Staking events: $(cat data/staking.json | jq '. | length // 0')"
        fi
        
        if [ -f data/pools.json ]; then
          echo "üèä Pool events: $(cat data/pools.json | jq '. | length // 0')"
        fi

    - name: üìÑ Update API Files
      run: |
        echo "üìÑ Updating API files..."
        
        # public/api klas√∂r√ºn√º olu≈ütur
        mkdir -p public/api
        mkdir -p out/api
        
        # Indexer data'sƒ±nƒ± public/api'ye kopyala
        if [ -d indexer/data ]; then
          echo "üìã Copying indexer data to public/api..."
          cp indexer/data/*.json public/api/ 2>/dev/null || echo "‚ö†Ô∏è No JSON files to copy from indexer/data"
        fi
        
        # public/api'den out/api'ye kopyala  
        if [ -d public/api ]; then
          echo "üìã Copying public/api to out/api..."
          cp public/api/*.json out/api/ 2>/dev/null || echo "‚ö†Ô∏è No JSON files to copy from public/api"
        fi
        
        echo "‚úÖ API files updated"

    - name: üìä Generate Stats
      run: |
        echo "üìä Generating statistics..."
        
        # Stats dosyasƒ± olu≈ütur
        POOLS_COUNT=7
        EVENTS_COUNT=2570
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        BUILD_NUMBER=${{ github.run_number }}
        
        # Pool ve event sayƒ±larƒ±nƒ± dosyalardan al (varsa)
        if [ -f public/api/pools.json ]; then
          POOLS_COUNT=$(cat public/api/pools.json | jq '. | length // 7')
        fi
        
        if [ -f public/api/staking.json ]; then
          EVENTS_COUNT=$(cat public/api/staking.json | jq '. | length // 2570')
        fi
        
        # Stats JSON olu≈ütur
        cat > public/api/stats.json << EOF
        {
          "totalPools": $POOLS_COUNT,
          "totalEvents": $EVENTS_COUNT,
          "lastUpdated": "$TIMESTAMP",
          "buildNumber": $BUILD_NUMBER,
          "autoDeployMode": true,
          "githubActions": true,
          "runId": "${{ github.run_id }}"
        }
        EOF
        
        # out/api'ye de kopyala
        cp public/api/stats.json out/api/stats.json
        
        echo "‚úÖ Stats generated:"
        echo "üìä Pools: $POOLS_COUNT"
        echo "üìà Events: $EVENTS_COUNT"
        echo "üî¢ Build: $BUILD_NUMBER"
        cat public/api/stats.json

    - name: üèóÔ∏è Build for Production
      run: |
        echo "üèóÔ∏è Building for production..."
        
        # Next.js build varsa √ßalƒ±≈ütƒ±r
        if [ -f package.json ] && grep -q '"build"' package.json; then
          echo "üî® Running npm build..."
          npm run build
        else
          echo "‚ö†Ô∏è No build script found, creating simple build..."
          
          # Basit build olu≈ütur
          mkdir -p out
          
          # public klas√∂r√ºn√º out'a kopyala
          if [ -d public ]; then
            cp -r public/* out/
          fi
          
          # src varsa build et
          if [ -d src ]; then
            echo "üìÅ Copying src files..."
            mkdir -p out/src
            cp -r src/* out/src/ 2>/dev/null || true
          fi
        fi
        
        echo "‚úÖ Build completed"
        echo "üìÅ Build contents:"
        ls -la out/ || echo "‚ö†Ô∏è out directory not found"

    - name: üöÄ Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './out'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "üöÄ Auto Deploy #${{ github.run_number }} - $(date)"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: false
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: üìä Deploy Summary
      run: |
        echo "üìä Deployment Summary"
        echo "======================"
        echo "‚úÖ Run completed successfully!"
        echo "‚è∞ Time: $(date)"
        echo "üî¢ Build Number: ${{ github.run_number }}"
        echo "üåê Site URL: https://orderstake.netlify.app"
        echo "üìà Next run: In 1 hour ($(date -d '+1 hour'))"
        
        # Dosya durumunu kontrol et
        echo ""
        echo "üìÅ Final file status:"
        echo "API files:"
        ls -la out/api/ 2>/dev/null || echo "‚ùå out/api not found"
        
        echo ""
        echo "üéØ Key metrics:"
        if [ -f out/api/stats.json ]; then
          cat out/api/stats.json | jq .
        else
          echo "‚ö†Ô∏è stats.json not found"
        fi

    - name: üíæ Commit Updated Data (if any)
      if: always()
      run: |
        echo "üíæ Checking for data updates to commit..."
        
        # Git yapƒ±landƒ±rmasƒ±
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Deƒüi≈üiklikleri kontrol et
        if git diff --quiet && git diff --cached --quiet; then
          echo "üìù No changes to commit"
        else
          echo "üìù Committing updated data..."
          git add indexer/data/ public/api/ out/api/ 2>/dev/null || true
          git commit -m "ü§ñ Auto-update: Indexer data $(date)" || echo "Nothing to commit"
          git push || echo "‚ö†Ô∏è Push failed or nothing to push"
        fi